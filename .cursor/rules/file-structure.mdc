# FMP Node Wrapper - Project Structure Rules

## Project Overview

This is a monorepo for a Financial Modeling Prep (FMP) API Node.js wrapper, organized using pnpm workspaces and Turbo for build orchestration.

## Important: Command Execution Requirements

**CRITICAL**: All commands must be run from the root directory (`fmp-node-wrapper/`). Never run commands from subdirectories like `apps/docs/` or `packages/api/`.

**Package Management**: This project uses **pnpm** exclusively for package management. Do not use npm or yarn. All package operations must use pnpm commands.

## Root Structure

```
fmp-node-wrapper/
├── apps/                    # Application packages
│   ├── docs/               # Next.js documentation site
│   └── examples/           # Example applications
│       └── vercel-ai/      # Vercel AI SDK integration example
├── packages/               # Library packages
│   ├── api/               # Main FMP API wrapper
│   ├── tools/             # AI tools for FMP API integrations
│   └── types/             # Shared TypeScript types
├── scripts/               # Build and utility scripts
├── package.json           # Root package.json with workspace scripts
├── pnpm-workspace.yaml    # Workspace configuration
├── turbo.json            # Turbo build pipeline configuration
├── tsconfig.json         # Root TypeScript configuration
├── jest.config.js        # Jest configuration
├── .eslintrc.js          # ESLint configuration
├── .prettierrc           # Prettier configuration
├── .npmrc                # NPM configuration
├── .gitignore            # Git ignore rules
├── LICENSE               # MIT license
├── CONTRIBUTING.md       # Contributing guidelines
├── README.md             # Main project README
├── .changeset/           # Changeset configuration
├── .github/              # GitHub workflows and templates
└── .cursor/              # Cursor IDE configuration
```

## Package Structure

### Apps

- **`apps/docs/`**: Next.js documentation site

  - Uses `fmp-node-api` as workspace dependency
  - Built with Next.js 15, React 19, and Tailwind CSS
  - MDX support for rich documentation with `@mdx-js/react`, `@next/mdx`, and `remark-gfm`
  - UI components using Radix UI primitives, Lucide React icons, and class-variance-authority
  - Syntax highlighting with `prism-react-renderer` and `react-syntax-highlighter`
  - Theme support with `next-themes` for dark/light mode
  - Organized component structure:
    - `components/mdx/` - MDX-specific components (code blocks, API tables)
    - `components/layout/` - Layout components (header, footer)
    - `components/theme/` - Theme-related components (theme provider, toggle)
    - `components/ui/` - Reusable UI components (buttons, cards)
  - Documentation pages organized as:
    - `docs/getting-started/` - Getting started guide
    - `docs/examples/` - Code examples and tutorials
    - `docs/api/` - API reference with subcategories:
      - `quote/` - Unified quotes for all asset types
      - `stock/` - Stock market data (market cap, splits, dividends)
      - `financial/` - Financial statements and ratios
      - `company/` - Company information and profiles
      - `etf/` - ETF data and holdings
      - `mutual-fund/` - Mutual fund data
      - `market/` - Market-wide data and performance
      - `economic/` - Economic indicators
      - `list/` - Stock lists and indices
      - `calendar/` - Earnings and economic calendar
      - `senate-house/` - Congressional trading data
      - `institutional/` - Form 13F filings
      - `insider/` - Insider trading data
      - `sec/` - SEC filings and industry data

- **`apps/examples/`**: Example applications demonstrating FMP API usage
  - **`vercel-ai/`**: Vercel AI SDK integration example
    - Chat interface using FMP tools with OpenAI
    - Demonstrates AI tool integration patterns
    - Built with Next.js 15, React 19, and Tailwind CSS
    - Uses `fmp-tools` and `fmp-node-api` as workspace dependencies

### Packages

- **`packages/api/`**: Main FMP API wrapper (`fmp-node-api`)

  - Core API client implementation
  - Endpoint modules for different API categories:
    - `quote.ts` - Unified quotes for all asset types
    - `stock.ts` - Market cap, splits, dividends, real-time prices
    - `financial.ts` - Financial statements and ratios
    - `company.ts` - Company information and profiles
    - `etf.ts` - ETF data and holdings
    - `mutual-fund.ts` - Mutual fund data
    - `market.ts` - Market-wide data and performance
    - `economic.ts` - Economic indicators
    - `list.ts` - Stock lists and indices
    - `calendar.ts` - Earnings and economic calendar
    - `senate-house.ts` - Congressional trading data
    - `institutional.ts` - Form 13F filings
    - `insider.ts` - Insider trading data
    - `sec.ts` - SEC filings and industry data
  - Shared utilities and constants
  - Jest tests and manual testing scripts
  - Built with tsup for multiple output formats

- **`packages/tools/`**: AI tools for FMP API integrations (`fmp-tools`)

  - AI tool implementations compatible with Vercel AI SDK, Langchain, OpenAI, and more
  - Provider-specific implementations:
    - `providers/vercel-ai/` - Vercel AI SDK tool providers
  - Tool wrapper utilities and type definitions
  - Built with tsup for multiple output formats
  - Uses `fmp-node-types` and `fmp-node-api` as workspace dependencies

- **`packages/types/`**: Shared TypeScript types (`fmp-node-types`)
  - Internal package containing all TypeScript interfaces and types
  - Organized by endpoint category (quote, stock, financial, etc.)
  - Used by both `fmp-node-api` and `fmp-tools` packages
  - Built with tsup for multiple output formats

## Build System

- **Turbo**: Monorepo build orchestration
- **pnpm**: Package manager with workspace support
- **tsup**: TypeScript bundling for packages
- **Jest**: Testing framework
- **ESLint + Prettier**: Code quality and formatting
- **Changesets**: Version management and publishing

## Key Scripts

**All commands must be run from the root directory using pnpm:**

### Development & Build

- `pnpm dev`: Start development mode for all packages
- `pnpm docs:dev`: Start docs development server
- `pnpm api:dev`: Start API package development mode
- `pnpm tools:dev`: Start tools package development mode
- `pnpm types:dev`: Start types package development mode
- `pnpm build`: Build all packages
- `pnpm clean`: Clean build artifacts
- `pnpm clean:install`: Clean all node_modules and reinstall

### Testing Commands

- `pnpm test`: Run all tests across packages
- `pnpm test:watch`: Run tests in watch mode
- `pnpm test:coverage`: Run tests with coverage report
- `pnpm test:endpoint`: Run specific endpoint test (requires cd to packages/api)
- `pnpm test:unit`: Run unit tests for API package
- `pnpm test:integration`: Run integration tests for API package
- `pnpm test:endpoints`: Run all endpoint tests
- `pnpm test:quote`: Run quote endpoint tests
- `pnpm test:stock`: Run stock endpoint tests
- `pnpm test:financial`: Run financial endpoint tests
- `pnpm test:market`: Run market endpoint tests
- `pnpm test:economic`: Run economic endpoint tests
- `pnpm test:list`: Run list endpoint tests
- `pnpm test:calendar`: Run calendar endpoint tests
- `pnpm test:company`: Run company endpoint tests
- `pnpm test:etf`: Run ETF endpoint tests
- `pnpm test:mutual-fund`: Run mutual fund endpoint tests
- `pnpm test:senate-house`: Run senate house endpoint tests
- `pnpm test:institutional`: Run institutional endpoint tests
- `pnpm test:insider`: Run insider endpoint tests
- `pnpm test:sec`: Run SEC endpoint tests
- `pnpm test:tools`: Run tools package tests
- `pnpm test:tool`: Run specific tool test

### Code Quality

- `pnpm lint`: Lint all TypeScript files
- `pnpm lint:fix`: Fix linting issues automatically
- `pnpm type-check`: Run TypeScript type checking
- `pnpm format`: Format code with Prettier
- `pnpm format:check`: Check code formatting

### Package Management

- `pnpm install`: Install all workspace dependencies
- `pnpm add <package>`: Add package to root (use `--filter` for specific workspaces)
- `pnpm remove <package>`: Remove package from root (use `--filter` for specific workspaces)

### Publishing

- `pnpm publish-packages`: Build, lint, test, version, and publish packages

## Development Workflow

1. **Always start from the root directory** (`fmp-node-wrapper/`)
2. Use `pnpm` for all package operations
3. API implementation is in `packages/api/`
4. Shared types are in `packages/types/`
5. AI tools are in `packages/tools/`
6. Documentation site consumes the API package
7. Examples demonstrate usage patterns
8. Turbo handles build dependencies and caching
9. Changesets manages versioning and publishing

## File Naming Conventions

- Use kebab-case for file and directory names
- Use PascalCase for React components
- Use camelCase for TypeScript functions and variables
- Use UPPER_SNAKE_CASE for constants

## Import Patterns

- Internal packages use workspace dependencies:
  - `"fmp-node-api": "workspace:*"`
  - `"fmp-tools": "workspace:*"`
  - `"fmp-node-types": "workspace:*"`
- External dependencies are managed at the package level
- Types are centralized in `fmp-node-types` package
- API client is imported from `fmp-node-api`
- AI tools are imported from `fmp-tools`

## API Structure

The API is organized into logical endpoint categories:

- **Quote Endpoints**: Unified quotes for stocks, forex, crypto, commodities, and ETFs
- **Stock Endpoints**: Market capitalization, stock splits, dividend history, real-time prices
- **Financial Endpoints**: Financial statements, ratios, income statements, balance sheets
- **Company Endpoints**: Company information, executive data, employee information
- **ETF Endpoints**: ETF data, holdings, and fund information
- **Mutual Fund Endpoints**: Mutual fund data, NAV, and performance
- **Market Endpoints**: Market performance, trading hours, sector data
- **Economic Endpoints**: Economic indicators, treasury rates, inflation data
- **List Endpoints**: Stock listings, screening, and filtering
- **Calendar Endpoints**: Earnings calendar, economic calendar, events
- **Senate House Endpoints**: Congressional trading data
- **Institutional Endpoints**: Form 13F filings and institutional ownership
- **Insider Endpoints**: Insider trading data and transactions
- **SEC Endpoints**: SEC filings, RSS feeds, industry classification

## AI Tools Structure

The AI tools package provides integrations for various AI platforms:

- **Vercel AI SDK**: Tool providers for Vercel AI SDK integration
- **Provider-specific implementations**: Organized by AI platform
- **Tool wrappers**: Utilities for creating and managing AI tools
- **Type definitions**: Shared types for tool implementations
